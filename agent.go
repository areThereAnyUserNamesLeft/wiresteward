package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"os/user"
	"path"
	"time"
)

// Agent is the wirestward client instance that manages a set of network devices
// based on configuration generated by remote wiresteward servers.
type Agent struct {
	deviceManagers []*DeviceManager
	oa             *oauthTokenHandler
}

// NewAgent creates an Agent from an AgentConfig. It generates a DeviceManager
// per device specified in the configuration, sets up and starts the associated
// resources.
func NewAgent(cfg *agentConfig) *Agent {
	agent := &Agent{}
	for _, dev := range cfg.Devices {
		urls := []string{}
		for _, peer := range dev.Peers {
			urls = append(urls, peer.URL)
		}
		dm := newDeviceManager(urls)
		if err := dm.Run(dev.Name, dev.MTU); err != nil {
			log.Printf("Error setting up device `%s`: %v", dev.Name, err)
			dm.Stop()
			continue
		}
		agent.deviceManagers = append(agent.deviceManagers, dm)
	}
	agent.oa = newOAuthTokenHandler(
		cfg.Oidc.AuthURL,
		cfg.Oidc.TokenURL,
		cfg.Oidc.ClientID,
		getDefaultAgentTokenFilePath(),
	)
	return agent
}

// ListenAndServe sets up and starts an http server on localhost, to allow for
// the OAuth2 exchange and token renewal.
func (a *Agent) ListenAndServe() {
	http.HandleFunc("/oauth2/callback", a.callbackHandler)
	http.HandleFunc("/", a.mainHandler)

	log.Println("Starting agent at localhost:7773")
	// Start agent at a high obscure port. That port is hardcoded as oauth
	// server needs to allow redirections to localhost:7773/oauth2/callback
	// 7773 is chosen by looking wiresteward initials hex on ascii table
	// (w = 0x77 and s = 0x73)
	if err := http.ListenAndServe("127.0.0.1:7773", nil); err != nil {
		log.Fatal(err)
	}
}

// Stop calls the Stop method on all DeviceManager instances that this Agent
// controls.
func (a *Agent) Stop() {
	for _, dm := range a.deviceManagers {
		dm.Stop()
	}
}

func (a *Agent) renewAllLeases(token string) {
	log.Println("Running renew leases loop..")
	for _, dm := range a.deviceManagers {
		if err := dm.RenewLeases(token); err != nil {
			log.Printf("Failed to renew leases for device `%s`: %v", dm.Name(), err)
		}
	}
}

func (a *Agent) callbackHandler(w http.ResponseWriter, r *http.Request) {
	token, err := a.oa.ExchangeToken(r.FormValue("code"))
	if err != nil {
		fmt.Fprintf(
			w,
			"error fetching token from web: %v",
			err,
		)
		return
	}
	a.renewAllLeases(token.IDToken)
	fmt.Fprintf(w, "Auth is now complete and agent is running! You can close this window")
}

func (a *Agent) mainHandler(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path != "/" {
		w.WriteHeader(http.StatusNotFound)
		return
	}

	token, err := a.oa.getTokenFromFile()
	if err != nil || token.IDToken == "" || token.Expiry.Before(time.Now()) {
		log.Println("cannot get a valid cached token, need a new one")
		// Get a url for the token challenge and redirect there
		url, err := a.oa.prepareTokenWebChalenge()
		if err != nil {
			fmt.Fprintf(
				w,
				"error creating web url to get token: %v",
				err,
			)
			return
		}
		http.Redirect(w, r, url, 302)
		return
	}
	a.renewAllLeases(token.IDToken)
	fmt.Fprintf(w, "Agent refreshed and running! You can close this window now")
}

// return home location or die
func deriveHome() string {
	u, err := user.Current()
	if err == nil && u.HomeDir != "" {
		return u.HomeDir
	}
	// try HOME env var
	if home := os.Getenv("HOME"); home != "" {
		return home
	}

	log.Fatal("Could not call os/user.Current() or find $HOME. Please recompile with CGO enabled or set $HOME")
	// not reached
	return ""
}

func getDefaultTokenDir() string {
	path := path.Join(deriveHome(), ".wiresteward/")
	if _, err := os.Stat(path); os.IsNotExist(err) {
		if err := os.MkdirAll(path, 0700); err != nil {
			log.Fatalf("Could not create dir %s: %v", path, err)
		}
	}
	return path
}

func getDefaultAgentTokenFilePath() string {
	return path.Join(getDefaultTokenDir(), "token")
}
