package main

import (
	"log"
)

// Agent is the wirestward client instance that manages a set of network devices
// based on configuration generated by remote wiresteward servers.
type Agent struct {
	deviceManagers []*DeviceManager
}

// NewAgent creates an Agent from an AgentConfig. It generates a DeviceManager
// per interface specified in the configuration, sets up and starts the
// assocated resources.
func NewAgent(cfg *AgentConfig) (*Agent, error) {
	a := &Agent{}
	for _, iface := range cfg.Interfaces {
		urls := []string{}
		for _, peer := range iface.Peers {
			urls = append(urls, peer.Url)
		}
		dm := newDeviceManager(urls)
		if err := dm.Run(iface.Name); err != nil {
			log.Printf("Error setting up device `%s`: %v", iface.Name, err)
			dm.Stop()
			continue
		}
		a.deviceManagers = append(a.deviceManagers, dm)
	}
	return a, nil
}

// Stop calls the Stop method on all DeviceManager instances that this Agent
// controls.
func (a *Agent) Stop() {
	for _, dm := range a.deviceManagers {
		dm.Stop()
	}
}
